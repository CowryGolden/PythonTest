#!/usr/bin/env python3
# -*- coding: utf-8 -*-
'''
    # 练习：利用递归函数实现汉诺塔的移动
    # 例如三层的汉诺塔（仅有三根柱子A、B、C），请编写move(n, a, b, c)函数，它接收参数n，表示3个柱子A、B、C中第1个柱子A的盘子数量，然后打印出把所有盘子从A借助B移动到C的方法。
    # 期待输出:
            # A --> C
            # A --> B
            # C --> B
            # A --> C
            # B --> A
            # B --> C
            # A --> C
'''

def hanoi(n, a, b, c):
    if n == 1:
        print(a, '-->', c)  # 只有一个盘子的情况下，直接将盘子从柱子A移动到柱子C上即可；
    else:
        hanoi(n-1, a, c, b) # 这里采用整体思维，(每个柱子上的盘子)从上到下的编号为1,2,...,n-1,n，将前n-1个盘子视为一个整体，从柱子A上移动到柱子B上
        hanoi(1, a, b, c) # 再将柱子A上剩余的最后一个（最大的）盘子，从柱子A上移动到柱子C上
        hanoi(n-1, b, a, c) # 最后将柱子B上的n-1个盘子整体从柱子B上移动到柱子C上，即完成汉诺塔的移动

n = int(input('请输入汉诺塔的层数：'))

hanoi(n, 'A', 'B', 'C')

'''
    #注：每次移动都得保持每根柱子上从下到上的的盘子顺序为从大到小，不能出现小的在大的下面的情况！！！
'''