#!/usr/bin/env python3
# -*- coding: utf-8 -*-
'''
    # 错误、调试和测试-调试：pdb调试器的使用
    # 使用场景：
        调试bug的手段：
        1、第一种方法简单直接粗暴有效，就是用print()把可能有问题的变量打印出来看看；用print()最大的坏处是将来还得删掉它，想想程序里到处都是print()，运行结果也会包含很多垃圾信息。
        2、使用断言；凡是用print()来辅助查看的地方，都可以用断言（assert）来替代；
        3、把print替换为logging，和assert比，logging不会抛出错误，而且可以输出到文件；
        4、启动Python的调试器pdb，让程序以单步方式运行，可以随时查看运行状态。
'''
# pdb调试器使用
# 首先准备好程序
s = '0'
n = int(s)
print(10 / n)

# 然后启动pdb调试器
'''
python -m pdb bug_debug_pdb_test1.py
以参数-m pdb启动后，pdb定位到下一步要执行的代码-> \'''（注释行）。输入命令l来查看代码：
输入命令n可以单步执行代码：
任何时候都可以输入命令p 变量名来查看变量：（代码必须运行过后的变量才能用p来查看，不然会报错：*** NameError: name 'n' is not defined）

'''

'''
    #注：这种通过pdb在命令行调试的方法理论上是万能的，但实在是太麻烦了，如果有一千行代码，要运行到第999行得敲多少命令啊。还好，我们还有另一种调试方法。
    pdb.set_trace()
    具体使用参见：bug_debug_pdb_test2.py        

'''